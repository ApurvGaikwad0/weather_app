CRUD Operations for Weather App - Step by Step Guide
-----------------------------------------------------

Important: Ensure your database is running and properly connected before executing any CRUD operations.
Make sure to set up the DATABASE_URL environment variable and run your database migrations.

Environment Setup:
------------------
1. Create a .env.local file in the root directory with the following:
   DATABASE_URL=postgresql://<username>:<password>@<host>:<port>/weather_app
   NEXT_PUBLIC_OPENWEATHERMAP_API_KEY=your_openweathermap_api_key
   NEXT_PUBLIC_YOUTUBE_API_KEY=your_youtube_api_key
   NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_google_maps_api_key

2. Run your database migration to set up the schema (using a tool like Prisma, Sequelize, etc.):
   Example for Prisma:
   npx prisma migrate dev

----------------------------------------------------- 

Step 1: CREATE - Add Weather Data
-----------------------------------
Endpoint: POST /api/weather
Description: Adds weather data for a location and date range.

Request Body (JSON):
{
  "location": "New York",
  "start_date": "2023-01-01",
  "end_date": "2023-01-07"
}

Example Command:
curl -X POST http://localhost:3000/api/weather \
  -H "Content-Type: application/json" \
  -d '{
    "location": "New York",
    "start_date": "2023-01-01",
    "end_date": "2023-01-07"
  }'

-----------------------------------------------------

Step 2: READ - Retrieve Weather Data
-------------------------------------
Endpoint: GET /api/weather
Description: Retrieves weather data from the database.

Query Parameters (optional):
  - location: Filter by location.
  - start_date and end_date: Filter by date range.

Example Commands:

-- To retrieve all weather records:
curl -X GET http://localhost:3000/api/weather

-- To retrieve weather data for a specific location and date range:
curl -X GET "http://localhost:3000/api/weather?location=New%20York&start_date=2023-01-01&end_date=2023-01-07"

-----------------------------------------------------

Step 3: UPDATE - Modify Weather Data
-------------------------------------
Endpoint: PUT /api/weather/:id
Description: Updates weather data for a specific record.

Request Body (JSON):
{
  "location": "Los Angeles",
  "start_date": "2023-01-01",
  "end_date": "2023-01-07"
}

Example Command (for record with ID 1):
curl -X PUT http://localhost:3000/api/weather/1 \
  -H "Content-Type: application/json" \
  -d '{
    "location": "Los Angeles",
    "start_date": "2023-01-01",
    "end_date": "2023-01-07"
  }'

-----------------------------------------------------

Step 4: DELETE - Remove Weather Data
-------------------------------------
Endpoint: DELETE /api/weather/:id
Description: Deletes a specific weather record.

Example Command (for record with ID 1):
curl -X DELETE http://localhost:3000/api/weather/1

-----------------------------------------------------

API Endpoints Summary:
----------------------
Method  Endpoint                Description
POST    /api/weather            Create a new weather record
GET     /api/weather            Retrieve weather records
PUT     /api/weather/:id        Update an existing weather record
DELETE  /api/weather/:id        Delete a weather record

-----------------------------------------------------
Notes:
1. Ensure the database is running before starting the server.
2. Validate the location and date ranges before making API requests.
3. Replace <id> in the URL for UPDATE and DELETE operations with the appropriate record ID.